@article{survey,
 author = {Baudry, Benoit and Monperrus, Martin},
 title = {The Multiple Facets of Software Diversity: Recent Developments in Year 2000 and Beyond},
 journal = {ACM Comput. Surv.},
 issue_date = {September 2015},
 volume = {48},
 number = {1},
 month = sep,
 year = {2015},
 issn = {0360-0300},
 pages = {16:1--16:26},
 articleno = {16},
 numpages = {26},
 url = {http://doi.acm.org/10.1145/2807593},
 doi = {10.1145/2807593},
 acmid = {2807593},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Software diversity, design principles, program transformation},
}

@article{n-version,
	author={A. Avizienis},
	journal={IEEE Transactions on Software Engineering},
	title={The N-Version Approach to Fault-Tolerant Software},
	year={1985},
	volume={SE-11},
	number={12},
	pages={1491-1501},
	keywords={Design diversity;N-version programming;N-version software;fault tolerance;multiple computation;software reliability;tolerance of design faults;Application software;Circuit faults;Computer errors;Computer science;Fault tolerance;Fault tolerant systems;Hardware;Humans;Software reliability;Software testing;Design diversity;N-version programming;N-version software;fault tolerance;multiple computation;software reliability;tolerance of design faults},
	doi={10.1109/TSE.1985.231893},
	ISSN={0098-5589},
	month={12},
}

@inproceedings{synthetic-diversity,
 author = {Just, James E. and Cornwell, Mark},
 title = {Review and Analysis of Synthetic Diversity for Breaking Monocultures},
 booktitle = {Proceedings of the 2004 ACM Workshop on Rapid Malcode},
 series = {WORM '04},
 year = {2004},
 isbn = {1-58113-970-5},
 location = {Washington DC, USA},
 pages = {23--32},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1029618.1029623},
 doi = {10.1145/1029618.1029623},
 acmid = {1029623},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {diversity, n-version programming, vulnerability},
}

@inproceedings{add-obfuscation,
 author = {Bhatkar, Sandeep and DuVarney, Daniel C. and Sekar, R.},
 title = {Address Obfuscation: An Efficient Approach to Combat a Broad Range of Memory Error Exploits},
 booktitle = {Proceedings of the 12th Conference on USENIX Security Symposium - Volume 12},
 series = {SSYM'03},
 year = {2003},
 location = {Washington, DC},
 pages = {8--8},
 numpages = {1},
 url = {http://dl.acm.org/citation.cfm?id=1251353.1251361},
 acmid = {1251361},
 publisher = {USENIX Association},
 address = {Berkeley, CA, USA},
}

@article{os-randomization,
	title = {Mitigating Buffer Overflows by Operating System Randomization},
	author = {Chew, Monica and Song, Dawn},
	year = {2009},
	month = {04},
}

@inproceedings{mem-exploits,
 author = {Bhatkar, Sandeep and Sekar, R. and DuVarney, Daniel C.},
 title = {Efficient Techniques for Comprehensive Protection from Memory Error Exploits},
 booktitle = {Proceedings of the 14th Conference on USENIX Security Symposium - Volume 14},
 series = {SSYM'05},
 year = {2005},
 location = {Baltimore, MD},
 pages = {17--17},
 numpages = {1},
 url = {http://dl.acm.org/citation.cfm?id=1251398.1251415},
 acmid = {1251415},
 publisher = {USENIX Association},
 address = {Berkeley, CA, USA},
}

@inproceedings{binary-stirring,
 author = {Wartell, Richard and Mohan, Vishwath and Hamlen, Kevin W. and Lin, Zhiqiang},
 title = {Binary Stirring: Self-randomizing Instruction Addresses of Legacy x86 Binary Code},
 booktitle = {Proceedings of the 2012 ACM Conference on Computer and Communications Security},
 series = {CCS '12},
 year = {2012},
 isbn = {978-1-4503-1651-4},
 location = {Raleigh, North Carolina, USA},
 pages = {157--168},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2382196.2382216},
 doi = {10.1145/2382196.2382216},
 acmid = {2382216},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {obfuscation, randomization, return-oriented programming, software security},
}

@Inbook{compiler-generated-sw-div,
	author="Jackson, Todd
	and Salamat, Babak
	and Homescu, Andrei
	and Manivannan, Karthikeyan
	and Wagner, Gregor
	and Gal, Andreas
	and Brunthaler, Stefan
	and Wimmer, Christian
	and Franz, Michael",
	editor="Jajodia, Sushil
	and Ghosh, Anup K.
	and Swarup, Vipin
	and Wang, Cliff
	and Wang, X. Sean",
	title="Compiler-Generated Software Diversity",
	bookTitle="Moving Target Defense: Creating Asymmetric Uncertainty for Cyber Threats",
	year="2011",
	publisher="Springer New York",
	address="New York, NY",
	pages="77--98",
	abstract="Present approaches to software security are to a large extent reactive: when vulnerabilities are discovered, developers scramble to fix the underlying error. The advantage is on the side of the attackers because they only have to find a single vulnerability to exploit all vulnerable systems, while defenders have to prevent the exploitation of all vulnerabilities. We argue that the compiler is at the heart of the solution for this problem: when the compiler is translating high-level source code to low-level machine code, it is able to automatically diversify the machine code, thus creating multiple functionally equivalent, but internally different variants of a program.We present two orthogonal compiler-based techniques.With multi-variant execution, a monitoring layer executes several diversified variants in lockstep while examining their behavior for differences that indicate attacks. With massive-scale software diversity, every user gets its own diversified variant, so that the attacker has no knowledge about the internal structure of that variant and therefore cannot construct an attack. Both techniques make it harder for an attacker to run a successful attack. We discuss variation techniques that the compiler can utilize to diversify software, and evaluate their effectiveness for our two execution models.",
	isbn="978-1-4614-0977-9",
	doi="10.1007/978-1-4614-0977-9_4",
	url="https://doi.org/10.1007/978-1-4614-0977-9_4"
}

@ARTICLE{large-scale-automated,
	author={A. Homescu and T. Jackson and S. Crane and S. Brunthaler and P. Larsen and M. Franz},
	journal={IEEE Transactions on Dependable and Secure Computing},
	title={Large-Scale Automated Software Diversityâ€”Program Evolution Redux},
	year={2017},
	volume={14},
	number={2},
	pages={158-171},
	keywords={security of data;software maintenance;automated software diversity;code-reuse attacks;large-scale automated software diversification;program evolution;software monoculture;software vulnerability;Browsers;Entropy;Operating systems;Program processors;Programming;Security;Biologically-inspired defenses;artificial software diversity;code reuse attacks;jump-oriented programming;return-oriented programming},
	doi={10.1109/TDSC.2015.2433252},
	ISSN={1545-5971},
	month={3},
}


@InProceedings{rop,
  author =       {Hovav Shacham},
  title =        {The Geometry of Innocent Flesh on the Bone: Return-into-libc without Function Calls (on the x86)},
  booktitle =    {Proceedings of CCS 2007},
  editor =       {De Capitani di Vimercati, Sabrina and Paul Syverson},
  month =        oct,
  year =         2007,
  publisher =    {ACM Press},
  pages =        {552-61}
}

@INPROCEEDINGS{SoK,
author={P. Larsen and A. Homescu and S. Brunthaler and M. Franz},
booktitle={2014 IEEE Symposium on Security and Privacy},
title={SoK: Automated Software Diversity},
year={2014},
volume={},
number={},
pages={276-291},
keywords={cryptography;mobile computing;probability;software performance evaluation;App store model;SoK;automated software diversity;cryptography;error reporting;implementation disclosure attacks;mobile computers;online software distribution;patching attacks;probabilistic protection;program transformations;software attacks;Encoding;Layout;Monitoring;Operating systems;Registers;Security},
doi={10.1109/SP.2014.25},
ISSN={1081-6011},
month={05},}

@INPROCEEDINGS{readactor,
author={S. Crane and C. Liebchen and A. Homescu and L. Davi and P. Larsen and A. R. Sadeghi and S. Brunthaler and M. Franz},
booktitle={2015 IEEE Symposium on Security and Privacy},
title={Readactor: Practical Code Randomization Resilient to Memory Disclosure},
year={2015},
volume={},
number={},
pages={763-780},
keywords={online front-ends;program compilers;Google Chromium browser;ROP;Readactor;V8 JIT compiler;code randomization;code-reuse attacks;compiler-based code generation paradigm;memory disclosure;return-oriented programming;Hardware;Layout;Operating systems;Program processors;Security;Virtual machine monitors},
doi={10.1109/SP.2015.52},
ISSN={1081-6011},
month={05},}

@INPROCEEDINGS{smashing-gadgets,
author={V. Pappas and M. Polychronakis and A. D. Keromytis},
booktitle={2012 IEEE Symposium on Security and Privacy},
title={Smashing the Gadgets: Hindering Return-Oriented Programming Using In-place Code Randomization},
year={2012},
volume={},
number={},
pages={601-615},
keywords={operating systems (computers);program debugging;security of data;source coding;Adobe Reader;Windows 7 applications;arbitrary code execution;in-place code randomization;partial disassembly coverage;return-oriented programming;symbolic debugging information;third-party software;Data mining;Debugging;Libraries;Payloads;Programming;Registers;Runtime},
doi={10.1109/SP.2012.41},
ISSN={1081-6011},
month={05},}

@inproceedings{librando,
  title={Librando: transparent code randomization for just-in-time compilers},
  author={Homescu, Andrei and Brunthaler, Stefan and Larsen, Per and Franz, Michael},
  booktitle={Proceedings of the 2013 ACM SIGSAC conference on Computer \& communications security},
  pages={993--1004},
  year={2013},
  organization={ACM},
}

@online{return-into-libc,
	title = "Getting around non-executable stack (and fix)",
	url = "http://seclists.org/bugtraq/1997/Aug/63",
	urldate = "2018-03-14",
	author = "Solar Designer",
	year = "1997",
}

@online{advanced-return-into-libc,
	title = "Advanced return-into-lib(c) exploits (PaX case study)",
	url = "http://phrack.org/issues/58/4.html",
	urldate = "2018-03-14",
	author = "Nergal",
	year = "2001",
}

@online{non-exec-stack,
	title = "non-exec stack",
	url = "http://seclists.org/bugtraq/2000/May/90",
	urldate = "2018-03-14",
	author = "Tim Newsham",
	year = "2000",
}
